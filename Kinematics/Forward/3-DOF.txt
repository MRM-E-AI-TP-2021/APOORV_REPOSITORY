FORWARD KINEMATICS:

~~~~~~~ 3-D, 3 DOF arm ~~~~~~~
#Geometric Approach:

import math
l1 = 10;
l2 = 10;
th1 = 0;   #th1 gives elevation of shoulder
th = -90;  #th gives rotation to shoulder
thr = 0;   #thr gives the joint 1 angle 
th4 = 180 - thr;
x = (l1*cos(math.radians(th1)) + l2*sin(math.radians(th4 + th1 - 90)))*cos(math.radians(th));
y = (l1*cos(math.radians(th1)) + l2*sin(math.radians(th4 + th1 - 90)))*sin(math.radians(th));
z = l1*sin(math.radians(th1)) - l2*cos(math.radians(th4 + th1 - 90));
if(abs(x)<0.5):
    x = 0;
if(abs(y)<0.5):
    y = 0;
if(abs(z)<0.5):
    z = 0;
print("x:",x);
print("y:",y);
print("z:",z);

~~~~~~~ ~~~~~~~
#Transformation Matrix Approach:

import math as m
import numpy as n

th = 0;   #inclination of shoulder w.r.t xy plane
th1 = 0;   #rotation of shoulder about z axis
th2 = 0;   #inclination of link 2 w.r.t link 1 

l1 = 0;
l2 = 5;
l3 = 5;
h = 0;

#All Angles:
cth = m.cos(m.radians(th));
if(abs(cth)<0.0001): cth = 0;
sth = m.sin(m.radians(th));
if(abs(sth)<0.0001): sth = 0;
cth1 = m.cos(m.radians(th1));
if(abs(cth1)<0.0001): cth1 = 0;
sth1 = m.sin(m.radians(th1));
if(abs(sth1)<0.0001): sth1 = 0;
cth2 = m.cos(m.radians(th2));
if(abs(cth2)<0.0001): cth2 = 0;
sth2 = m.sin(m.radians(th2));
if(abs(sth2)<0.0001): sth2 = 0;

#Base to Link 1 (Rotation Of Shoulder):
H01 = n.matrix([[cth,-1*sth,0,0],[sth,cth,0,0],[0,0,1,h],[0,0,0,1]]);
#print(H01);

#Link 1 to Link 2 (Elevation Of Shoulder):
H12 = n.matrix([[cth1,0,-1*sth1,0],[0,1,0,0],[sth1,0,cth1,l1],[0,0,0,1]]);
#print(H12);

#Link 2 to Link 3 (Elevation of Link):
H23 = n.matrix([[cth2,0,-1*sth2,l2],[0,1,0,0],[sth2,0,cth2,0],[0,0,0,1]]);
#print(H23);

#Link 3 to End-Effector:
#H34 = n.matrix([[1,0,0,l3],[0,1,0,0],[0,0,1,0],[0,0,0,1]]);
H34 = n.matrix([[l3],[0],[0],[1]]);


#print(P);
R = (H01*H12*H23*H34);
print("R: \n",R);

~~~~~~~ ~~~~~~~
#Product Of Exponentials Approach:

import math as m
import modern_robotics as mr
import numpy as np

h = 0   #Height of the base above the ground
l1 = 5   #Length of link 1
l2 = 5   #Length of Link 2

th = m.radians(80)   #Rotation of Arm about z-axis
th1 = m.radians(90)   #Inclination of Link 1 w.r.t xy plane
th2 = m.radians(0)   #Inclination of Link 2 w.r.t link 1

l = l1 + l2

M = np.array([[ 1 , 0 , 0 , l ],
              [ 0 , 1 , 0 , 0 ],
              [ 0 , 0 , 1 , h ],
              [ 0 , 0 , 0 , 1 ]])
#M

Slist = np.array([[ 0 , 0 , 1 , 0 , 0 , 0 ],     #S0
                  [ 0 ,-1 , 0 , h , 0 , 0 ],     #S1
                  [ 0 , 1 , 0 ,-h , 0 , l1]]).T  #S2
#Slist

thlist = np.array([th , th1 , th2])
#thlist

R = mr.FKinSpace(M,Slist,thlist)

for i in range(0,4):
    for j in range(0,4):
        R[i][j] = round(R[i][j])
R